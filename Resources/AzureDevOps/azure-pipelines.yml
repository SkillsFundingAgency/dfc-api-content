resources:
  repositories:
  - repository: self
  - repository: dfc-devops
    type: github
    name: SkillsFundingAgency/dfc-devops
    ref: refs/tags/v1.11.1
    endpoint: 'GitHub (ESFA)'

pool:
  name: NCS - CI and CD
  demands:
  - msbuild
  - visualstudio

trigger: 
  branches:
    include: 
    - dev

pr:
  branches:
    include: 
    - dev

stages:
- stage: Build
  jobs:
    - job:
      displayName: "Build and test application and templates"
      steps:
      - template: /AzureDevOpsTemplates/Build/StepTemplates/dfc-arm-build.yml@dfc-devops
        parameters:
          ArmTemplateRoot: "$(System.DefaultWorkingDirectory)/Resources/ArmTemplates"
          SolutionBaseName: 'DFC.Api.Content'

      - template: /AzureDevOpsTemplates/Build/StepTemplates/dfc-dotnetcore-build-sonar.yml@dfc-devops
        parameters:
          SolutionBaseName: 'DFC.Api.Content'
          BuildPlatform: 'any cpu'
          BuildConfiguration: 'release'
          PublishWebApp: true
          TestSuffix: 'Tests'
          DotNetCoreVersion: '3.1.100'

      - task: PublishPipelineArtifact@1
        displayName: Publish OpenAPI docs to Pipeline Artifact
        inputs:
          targetPath: "$(System.DefaultWorkingDirectory)/DFC.Api.Content/OpenAPIDocs"
          artifactName: DFC.Api.Content.Resources.OpenAPIDocs

      - task: PublishPipelineArtifact@1
        displayName: Publish API import script to Pipeline Artifact
        inputs:
          targetPath: "$(System.DefaultWorkingDirectory)/Resources/Scripts"
          artifactName: DFC.Api.Content.Resources.Scripts

      - task: PublishPipelineArtifact@1
        displayName: Publish apim policies
        inputs:
          targetPath: "$(System.DefaultWorkingDirectory)/Resources/ApimPolicy"
          artifactName: DFC.Api.Content.Resources.ApimPolicies


- stage: DeployToDevContent
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  displayName: Deploy to DEV_CONTENT
  variables:
  - template: VariableTemplates/DevEnvironmentVariables.yml
  - group: dfc-shared-all
  - group: dfc-api-content-all
  - group: dfc-app-integrationtests-all
  - group: dfc-shared-dev
  - group: dfc-app-shared-all
  - group: dfc-stax-shared-dev
  - group: dfc-app-shared-dev
  - group: 'KeyVault - dfc-dev-shared-kv'
  - name: WebAppPrefix
    value: dfc-dev
  jobs:
  - template: JobTemplates/deploy-environment.yml
    parameters:
      AzureSubscription: 'SFA-CDH-Dev/Test (962cae10-2950-412a-93e3-d8ae92b17896)'
      EnvironmentTag: '$(EnvironmentTag)'
      ParentBusiness: '$(ParentBusiness)'
      ServiceOffering: '$(ServiceOffering)'
      ResourceGroup: 'dfc-dev-api-cont-rg'
      PackageFile:  "$(Pipeline.Workspace)/DFC.Api.Content.DeploymentPackages/DFC.Api.Content.zip"
      ApimPoliciesPath:  "$(Pipeline.Workspace)/DFC.Api.Content.Resources.ApimPolicies"
      ApimProductId: 'content'
      ApimLoggerName: 'content-logger'
      APIProductInstanceName: 'content'
      ArmTemplateFolder: "$(Pipeline.Workspace)/DFC.Api.Content.Resources.ArmTemplates/"
      ApimImportScript: "$(Pipeline.Workspace)/DFC.Api.Content.Resources.Scripts/Import-ApimOpenApiDefinitionFromFile.ps1"
      SpecificationPath: "$(Pipeline.Workspace)/DFC.Api.Content.Resources.OpenApiDocs"
      SharedResourceGroup: 'dfc-dev-shared-rg'
      ApimServiceName: 'dfc-dev-shared-apim'
      FunctionAppDomain: '$(FunctionAppDomain)'
      FunctionAppName: 'dfc-dev-api-content-fa'
      EnvironmentName: DEV_CONTENT
      DFCAzureDevOpsProjectGuid: $(DFCAzureDevOpsProjectGuid)
      # The Apis parameter requires a complex object be passed in,  which requires some odd looking yaml.
      # The top level -`s here defines an array of "something"
      # The inner level -'s defines an array of mappings.
      Apis: 
        -
          - name: GetContent
            azureFunctionName: '${{ variables.WebAppPrefix }}-api-cont-fa'

- stage: DeployToSitContent
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  displayName: Deploy to SIT_CONTENT
  variables:
  - template: VariableTemplates/SitEnvironmentVariables.yml
  - group: dfc-shared-all
  - group: dfc-api-content-sit
  - group: dfc-app-integrationtests-all
  - group: dfc-shared-sit
  - group: dfc-app-shared-all
  - group: dfc-stax-shared-sit
  - group: dfc-app-shared-sit
  - group: 'KeyVault - dfc-sit-shared-kv'
  - name: WebAppPrefix
    value: dfc-sit
  jobs:
  - template: JobTemplates/deploy-environment.yml
    parameters:
      AzureSubscription: 'SFA-CDH-Dev/Test (962cae10-2950-412a-93e3-d8ae92b17896)'
      EnvironmentTag: '$(EnvironmentTag)'
      ParentBusiness: '$(ParentBusiness)'
      ServiceOffering: '$(ServiceOffering)'
      ResourceGroup: 'dfc-sit-api-cont-rg'
      PackageFile:  "$(Pipeline.Workspace)/DFC.Api.Content.DeploymentPackages/DFC.Api.Content.zip"
      ApimPoliciesPath:  "$(Pipeline.Workspace)/DFC.Api.Content.Resources.ApimPolicies"
      ApimProductId: 'content'
      ApimLoggerName: 'content-logger'
      APIProductInstanceName: 'content'
      ArmTemplateFolder: "$(Pipeline.Workspace)/DFC.Api.Content.Resources.ArmTemplates/"
      ApimImportScript: "$(Pipeline.Workspace)/DFC.Api.Content.Resources.Scripts/Import-ApimOpenApiDefinitionFromFile.ps1"
      SpecificationPath: "$(Pipeline.Workspace)/DFC.Api.Content.Resources.OpenApiDocs"
      SharedResourceGroup: 'dfc-sit-shared-rg'
      ApimServiceName: 'dfc-sit-shared-apim'
      FunctionAppDomain: '$(FunctionAppDomain)'
      FunctionAppName: 'dfc-sit-api-content-fa'
      EnvironmentName: SIT_CONTENT
      DFCAzureDevOpsProjectGuid: $(DFCAzureDevOpsProjectGuid)
      # The Apis parameter requires a complex object be passed in,  which requires some odd looking yaml.
      # The top level -`s here defines an array of "something"
      # The inner level -'s defines an array of mappings.
      Apis: 
        -
          - name: GetContent
            azureFunctionName: '${{ variables.WebAppPrefix }}-api-cont-fa'